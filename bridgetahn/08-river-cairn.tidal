bpm 210

-- reference
let pat = "{1 ~ 0 0 0*2 0*2 0*2 ~ ~ 1*2 1 0 1*2 1*2 [1 0] [1 0] 1 0 0 0}%8"
let pat1 = "{~ ~ 0 0 0*2 0*2 0*2 ~ ~ ~   ~ 0 ~   ~   [~ 0] [~ 0] ~ 0 0 0}%8"
let pat2 = "{1 ~ ~ ~ ~   ~   ~   ~ ~ 1*2 1 ~ 1*2 1*2 [1 ~] [1 ~] 1 ~ ~ ~}%8"

-- real

do
    let xxpat = "{~ ~ 0 0 0*2 0*2 0*2 ~ ~ ~   ~ 0 ~   ~   [~ 0] [~ 0] ~ 0 0 0}%8"
    let yypat = "{1 ~ ~ ~ ~   ~   ~   ~ ~ 1*2 1 ~ 1*2 1*2 [1 ~] [1 ~] 1 ~ ~ ~}%8"
    let xx = gain (inverse <$> xxpat)
    let yy = gain (yypat)
    c1 $ 
        stack [        
            yy # sound "y0" # n (irand 21) # cut "1" # gain "1.1" # end (shift $ choose [0.3..1]),
            xx # sound "x" # n "0" # cut "2" # gain "1",
            xx # sound "x" # n "1" # gain "0.8",
            (0.5 <~) $ xx # sound "x" # n "2" # gain "0.8" # cut "4" # speed (scale 1 1.25 $ saw)] # coarse "3"

            hush




do
    let xxpat = "{~ ~ ~ ~ ~  0 ~ ~ 0*2 ~ 0 [~ 0] ~ 0 ~ ~ ~ ~ 0 0 0}%8"
    let yypat = "{1   [1 ~] ~ ~ ~ ~ ~ ~ [1 ~] ~ 1 ~ ~ 1*2 1*2 1 1 1 1 1 ~ ~}%8"
    let xx = gain (inverse <$> xxpat)
    let yy = gain (yypat)
    c1 $ whenmod 15 12 (iter 8) $ 
        move $ fuckery $
        stack [        
            yy # sound "run:6" # cut "-1" # speed "[1 0.5]/8",
            degradeBy 0.1 $ brakk "jung4*8" # shape "0.5" # gain "1.1",
            yy # sound "y0" # n (irand 21) # cut "1" # gain "1" # end (shift $ choose [0.3..1]),
            xx # sound "x" # n "0" # cut "2" # gain "1" # speed "0.75",
            gtfo $ xx # sound "x" # n "1" # gain "0.8",
            gtfo $ (0.5 <~) $ xx # sound "x" # n "2" # gain "0.8" # cut "4" # speed (scale 1 1.25 $ saw)] # coarse "3"
            
            hush

do 
    let pat = "{y ~ x x x*2 x*2 x*2 ~ ~ y*2 y x y*2 y*2 [y x] [y x]}%8"
    d1 $ sound pat # cut "1"

    hush