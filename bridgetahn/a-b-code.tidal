bps (170/120)

d1 $ foldEvery [3,4] (0.25 ~>) $
  whenmod 22 19 (iter 8) $
  whenmod 20 17 (iter 4) $
  every 5 (rip 0.5 0.1) $
  every 6 (rip' 0 1 8 0.5 0.1) $
  rarely (off (0.125*3) (|*| speed "1.25")) $
  stack [
  degradeBy 0.3 $ runWith 4 (density 2) $ iter 4 $ jux rev $
  off 0.25 (|+| n "<1 3 5 2>") $ struct "x(3,8) *2" $ n "<0 1 4>" # sound "[jung5 jung6 jung7]/8"
    # unit "c" # speed "8",
  runWith 2 (density 2) $
    off (0.25*3) (|+| n "<4 2 3>") $
    stack [
      sound "alstab" # n "<0 1 2>" # cut "3" # up "[-12 -15]/8" # shape "0.1" # gain "1.1",
      sound "alk" # n "<0 1 2>" # cut "4",
      whenmod 16 4 (gtfo) $ off (0.125*3) (|+| n "{1 2 3}%16") $
        foldEvery [2,3] (slow 2) $
        struct "x([3 5]/2,8)" $ sound "als" # cut "-1" ] ]


hush


bps (140/120)

do
  let pat = "{1 ~ ~ 1 ~ ~ ~ ~}%2"
  d1 $ (|+| gain "0.1") $ foldEvery [3,4] (0.25 <~) $
    every 6 (|=| coarse "{32 24 16 12 8 }%16") $
    every 7 (|=| accelerate "-1 1") $
    stack [
      degradeBy 0.4 $
        sound "revkit*16" # n (density 2.3 $ run 7) # gain "0.8",
      (# n "[1 0 3]/5") $ (|+| gain "[0 -0.1 0]/5") $ rarely (stut' 2 (0.0625) (|*| gain "1")) $
        rep' 8 $ gain pat # sound "alk" # cut "10",
      (# n "[1 0 2]/5") $ (|+| gain "[0.05 0.1 0.05]/5") $ rep' 8 $ gain pat # sound "alstab"
        # cut "1",
      sound "~ alcp" # gain "1",
      whenmod 14 7 (degrade) $ jux (iter 16) $
        sound "als([5 3 7]/3,8)" # cut "100" # end "0.05" # gain "0.8" # speed "1"
    ]

hush

-- possible itnro 2
do
  let pat = "{1 ~ ~ 1 ~ ~ ~ ~}%2"
  d1 $ (|+| gain "0.1") $ foldEvery [3,4] (0.25 <~) $
    every 6 (|=| coarse "{32 24 16 12 8 }%16") $
    every 7 (|=| accelerate "-1 1") $
    stack [
      (# n "[1 0 2]/5") $ (|+| gain "[0.05 0.1 0.05]/5") $ rep' 8 $ gain pat # sound "alstab"
        # cut "1" # speed "0.25",
      sound "~ alcp" # gain "1",
      jux (iter 16) $
        sound "als([5 3 7]/3,8)" # cut "100" # end "0.025" # gain "0.8" # speed "2"
          # accelerate (choose [-1, 1])
    ]

