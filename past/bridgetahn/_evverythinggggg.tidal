
let rip a b p = within (0.25, 0.75) (slow 2 . rev . stut 8 a b) p
    rip' a b c d e p = within (a, b) (slow 2 . rev . stut c d e) p
    spike p = ((# delaytime (scale 0.001 0.3 $ slow 7.1 sine1)) . (# delayfeedback (scale 0.7 0.99 $ slow 6.71 sine1))) $ p
    spike' p = (# delay "0.3") $ spike $ p
    ghost'' a f p = superimpose (((a/2 + a*2) ~>) . f) $ superimpose (((a + a/2) ~>) . f) $ p
    ghost' a p = ghost'' a ((|*| gain "0.7") . (|=| end "0.2") . (|*| speed "1.25")) p
    ghost p = ghost' 0.125 p
    jit start amount p = within (start, (start + 0.5)) (trunc (amount)) p
    gtfo p = (const $ sound "~") p
    gtfo' p = (const $ midinote "~") p
    gtfom = gtfo'
    gtfo2 = gtfo'
    shift p = (1024 <~)  p
    shift' x p = (x <~) p
    choose xs = (xs !!) <$> (irand $ fromIntegral $ length xs)
    one p = stut' 1 (0.125/2) (|*| gain "1") $ p
    one' p = rarely (stut' 1 (0.125/2) (|*| gain "1")) $ shift' 1024 $ p
    one'' p = sometimes (stut' 1 (0.125/2) (|*| gain "1")) $ shift' 1024 $ p
    rep n p = stut' (n-1) (0.125*3) (|*| gain "1") $ p
    rep' n p = stut' (n-1) (0.125/2*3) (|*| gain "1") $ p
    rep'' n p = stut' (n-1) (0.125/4*3) (|*| gain "1") $ p
    beginend bpat durpat = (begin bpat) # (end $ (+) <$> bpat <*> durpat)
    ionian = [0,2,4,5,7,9,11]
    aeolian = [0,2,3,5,7,8,10]
    locrian = [0,1,3,5,6,8,10]
    phryg = [0,1,3,5,7,8,10]
    phryg2 = [0,1,3,5,7,8,10,12,13,15,17,19,20,22]
    lydian = [0,2,4,6,7,9,11]
    enig = [0,1,3,5,6,8,10,11]
    minor = [0,3,7]
    major = [0,4,7]
    whole = [0,2,4,6,8,10,12]
    _9 = [0,4,7,10,14]
    ninesus4 = [0,5,7,10,14]
    add9 = [0,4,7,14]
    madd9 = [0,3,7,14]
    maj9 = [0,4,7,11,14]
    m9 = [0,3,7,10,14]
    sus2 = [0,2,7]
    sus4 = [0,5,7]
    _7 = [0,4,7,10]
    m7 = [0,3,7,10]
    eleven = [0,4,7,10,14,17]
    _11 = [0,4,7,10,14,17]
    m11 = [0,3,7,10,14,17]
    _13 = [0,4,7,10,14,21]
    m13 = [0,3,7,10,14,21]
    mpent = [0, 3, 5, 7, 10, 12]
    pent = [0, 2, 4, 7, 9, 12]
    inverse 1 = 0
    inverse 0 = 1
    inverse 11 = 0
    inverse 10 = 1
    bpm x = bps (x/120)
    brakk samps = ((|=| unit "c") . (|=| speed "8")) $ sound (samples samps (irand 30))
    brakk4 samps = ((|=| unit "c") . (|=| speed "4")) $ sound (samples samps (irand 30))
    move p = foldEvery [3,4] (0.25 <~) $ p 
    move'' p = foldEvery [2,3] (0.25 <~) $ p
    move' p = foldEvery [3,4] (0.25 ~>) $ p 
    move''' p = foldEvery [2,3] (0.25 ~>) $ p 
    delays = [(1/512), (1/256), (1/128), (1/64), (1/32), (1/16), (1/8)]
    randDelay p = ((|=| delay (scale 0.5 0.7 $ shift' 5001 $ rand)) . (|=| delaytime (shift' 5002 $ choose delays)) . (|=| delayfeedback (scale 0.5 0.9 $ shift' 5003 $ rand))) $ p
    crumble = slow 2 $ sound "[k*16 ~]/2 ~" # n (run 32)
    rando = randDelay
    foldEVery = foldEvery 
    stupid = randDelay
    weird = randDelay
    fml = id
    lol = id
    ffs = id
    tfw = id
    u = id
    pls = id
    wot = id
    m8 = id
    conditionalsux = id
    accelrate = accelerate
    discretize = discretise
    fuckery p = every 5 (rip 0.5 0.1) $ every 6 (rip' 0 1 8 0.5 0.1) $ every 7 (|=| coarse "{4 8 6 12 16}%14") $ every 8 (|=| accelerate "-0.5 0.5") $ p
    crushit p = (|=| crush (scale 3 8 $ slow 1.1 tri)) $ p

bpm 140

flood "kindohm "

-- intro
c3 $ sometimes (jux (iter 4)) $ shift $ sometimes (|=| speed "[0.5 0.25]*3") $
(|=| cutoff (scale 100 3000 $ sine1)) $ slow 16 $ striate 128 $ sound (samples "dr:0" "[0 1]/8")
  |=| resonance "0.1" |=| gain "1.1"
  # delaytime "0.5" # delayfeedback "0.5" # delay "0.5"

hush

c1 $ sound "legends:1/4" # cut "3"

hush

-- risc chip
let pat0 = "{0 ~ ~ ~ ~}%4"
    pat1 = "{1 ~ ~ ~ ~}%4"
    patmod p = foldEvery [2,3,4] (0.25 ~>) $ rep' 5 $ p

c2 $ slow 2 $ sound "milong:2([9 7 11 10]/4,16)"
  |=| begin "{0.05 0.05 0.05}%1" |=| cut "921" |=| gain "0.9"

c2 $ sound "milong:2/4" |=| cut "921" |=| gain "0.9"
hush

c1 $ move $ every 5 (rip 0.5 0.1) $ 
    every 7 (|=| coarse "{16 32 24 8 4}%7") $
    every 8 (|=| accelerate "-1 1") $
    every 9 (crushit) $
  stack [
    whenmod 12 9 (gtfo) $ degradeBy 0.2 $ brakk "amenall2*8" # gain "1.1",
    patmod $ n pat0 # s "risckit" |=| gain "1",
    iter 8 $ sound "~ risckit:2" # gain "1.1",
    every 7 (stut' 5 0.0625 (|*| gain "0.5")) $
      whenmod 4 2 (0.125 ~>) $ sound "~ risckit:1",
    whenmod 7 5 (slow (4/3)) $ whenmod 5 3 (density 2) $ sound "risckit:4*8",
    sound "risckit:7/16",
    whenmod 22 17 (const $ sound "~") $
      rarely (|=| up "-1") $ patmod $ (|+| n (slow 49 $ irand 49)) $ n pat0
        |=| s "stab1" |=| cut "20" |=| gain "1",
    whenmod 18 12 (gtfo) $ (|+| up "[1 -2 0 -5 3 -1 5]/28") $ patmod $ gain pat1
      |=| s "mi" # n "[0 1 5 6 17 7 8 9 10 11 12 13 15 17]/56" |=| cut "2" |=| gain "0.9" ]

hush

-- bluejay
bps (180/120)

-- orig
let pat = "{1 1*2 ~ ~ ~ 1 ~ 1*2 1 ~ 1 1 ~ ~ [~ 1] ~ 1 [~ 1] ~ 1 ~}%8"

-- orig
do
    let pat = "{1 1*2 ~ ~ ~ 1 ~ 1*2 1 ~ 1 1 ~ ~ [~ 1] ~ 1 [~ 1] ~ 1 ~}%8"
    c1 $whenmod 16 13 (iter 8) $ move $ 
        whenmod 8 6 (jux rev) $
        every 5 (rip 0.25 0.25) $
        every 6 (crushit) $
        every 7 (|=| coarse "{16 8 4 12 24}%7") $
        stack [
            gtfo $ degradeBy 0.2 $ brakk "brkh2*8" # shape "0.1",
            gtfo $ rarely ((|=| s "cps1") . (|=| n (irand 10)) . (|=| speed (scale 0.8 1.2 $ slow 1.1 rand))) $ 
                whenmod 8 4 (|+| n "1") $ gain pat # s "kbj" # cut "2" # n "[0 4]/9",
            gain pat # sound "stab1" # cut "1" # n (irand 10) # speed "1" # shape "0.1",
            whenmod 10 5 (0.125 <~) $ s "ss" # shape "0.2", 
            gtfo $ sometimes (stut' 1 (0.0625) (|*| gain "0.95")) $ shift $ s "spike1*8" 
                # gain (scale 0.9 1.2 $ slow 1.3 rand) # gain "0.95"
                # pan (scale 0.1 0.9 $ slow 1.4 rand) ]
            # delay "0" # delaytime "0" # delayfeedback "0"


hush

-- fl
bps (200/120)

hush

c2 $ whenmod 17 14 (iter 8) $ 
    move $ every 5 (rip 0.5 0.1) $ every 6 (|=| coarse "{16 8 12 24}%7") $
    every 7 (crushit) $
    stack [
        slow 16 $ striate' 128 (1/90) $ sound "run:6" # gain "0.8" # speed "[1, 0.5]",
        gtfo $ sound "ch:7*8" # gain "0.7",
        gtfo $ slow 2 $ sound "~ sdeep" # gain "1.2",
        gtfo $ crumble,
        gtfo $ degradeBy 0.1 $ brakk "fur1*8",
        gtfo $ rarely (stut' 1 (0.125/2) (|*| gain "1")) $ shift $
            rarely (|+| n "10") $
            shift $ degradeBy 0.3 $ sound "fl1*8" # cut "3" # n "[8 6]/12" # gain "1.1"
            # hcutoff "0.01" # hresonance "0.1",
        degradeBy 0.6 $ sound "lift" # n (irand 30) # gain "0.9" # speed "0.5"  ]
        # delaytime "0" # delayfeedback "0"

hush



-- info
bpm 170


c3 $ sometimes (jux (iter 4)) $ shift $ sometimes (|=| speed "[0.5 0.25]*3") $
  (|=| cutoff (scale 100 3000 $ sine1)) $ slow 16 $ striate 128 $ sound (samples "dr:0" "[0 1]/8")
    |=| resonance "0.1" |=| gain "1.1"
    # delaytime "0" # delayfeedback "0"


c1 $ spike' $ move $ every 5 (rip 0.5 0.1) $ every 6 (rip' 0 1 8 0.5 0.25) $
every 7 (crushit) $
every 8 (|=| coarse "{16 32 24 8 12 4}%7") $
stack [
  degradeBy 0.2 $ slowcat [brakk "nu*8", brakk "amenall2*8" # gain "1.2", brakk "teeny1*8" ],
  sound (samples "{[ch]*2 k*4? [s cp] ch*2 cp/2}%4" (run 20)),
  sound (samples "{~ seq2 ~}%2" (irand 20)) |=| cut "2" |=| speed "{1 -1 1}%16" # gain "0.8",
  sound (samples "{seq3 ~ ~ ~ ~}%2" (irand 20)) |=| cut "5",
  sometimes (density 2) $ shift $ rarely (|=| begin "0.5") $ shift $ sometimes (0.125 ~>) $
  sound (samples "seq1" (irand 20)) |=| cut "4"]
    |=| delaytime "0" |=| delayfeedback "0"

c1 silence

hush

-- c code
bps (140/120)

do
    let struc = "{x ~ ~ ~ ~ ~ [x] ~ ~ [~ x] ~ ~}%8"
    c1 $ whenmod 5 3 (rev) $ slow "<4 8 24 16 12>" $ superimpose (0.5 <~) $ trunc 0.5 $
        striate "32 16 128 64" $ 
        rep' 3 $ struct struc $ sound "ccstab" 
            # n (slow 18 $ run 6) 
            # gain "1"
            # speed "[0.5 0.75 0.5 1 0.25]/13" 
            # shape "0.2" 
            # delaytime "0.875" # delay "0.3" # delayfeedback "0.5"


flood "kindohm "

hush

do
    let struc = "{x ~ ~ ~ ~ ~ [x] ~ ~ [~ x] ~ ~}%8"
    c1 $ density 4 $
        move $ whenmod 11 8 (jux rev) $ 
        every 5 (rip 0.5 0.1) $ every 6 (|=| coarse "{8 4 16 24 32}%")  $
        every 7 (crushit) $ every 8 (|=| accelerate "-1 1") $
        stack [
        degrade $
            gain "1*16" # sound "[cckit1 cckit2]/10" # n (irand 10) |=| cut "-1",
        rep' 3 $ struct struc $ sound "cck" # n (slow 18 $ run 6) |=| cut "2",
        rep' 3 $ struct struc $ sound "ccstab" # n (slow 18 $ run 6) # gain "1"
            |=| cut "1" # speed "[0.5 0.75 0.5 1]/13" # shape "0.2",
        whenmod 15 11 (gtfo) $ sound "~ cccp" # gain "1.2" # shape "0.1",
        struct "{~ x [~ x] [~ x/2] ~}%2" $ sound "ccs" # n "[0 1 2]/32" # speed "1.5"
            # gain "1.1"
            # delay "0.3"
            # delaytime (scale 0.005 0.333 $ slow 3 tri1)
            # delayfeedback (scale 0.5 0.95 $ slow 4.33 tri1) ]
            # delaytime "0" # delayfeedback "0"

            hush

            c1 silence

-- a b code
bps (140/120)

-- possible itnro 2
do
  let pat = "{1 ~ ~ 1 ~ ~ ~ ~}%2"
  c2 $ (|+| gain "0") $ foldEvery [3,4] (0.25 <~) $
    stack [
      (# n "[1 0 2]/5") $ (|+| gain "[0.05 0.1 0.05]/5") $ rep' 8 $ gain pat # sound "alstab"
        # cut "1" # speed "0.25",
      sound "~ alcp" # gain "1",
      gtfo $ jux (iter 16) $
        sound "revkit([5 3 7]/3,8)" # cut "100" # end "1" # gain "0.7" # speed "2"
          # accelerate (choose [-1, 1])
    ]

hush
    
do
  let pat = "{1 ~ ~ 1 ~ ~ ~ ~}%2"
  c1 $ spike' $ whenmod 17 14 (iter 8) $
    move $ every 5 (rip 0.5 0.1)$ every 6 (rip' 0 1 8 0.25 0.25) $
    every 7 (crushit) $
    stack [
       density 2 $ (|=| speed "16") $ 
        degradeBy 0.3 $ brakk "akuma1*8" # gain "1.1",
      degradeBy 0.4 $
        sound "revkit*16" # n (density 2.3 $ run 7) # gain "0.8",
      (# n "[1 0 3]/5") $ (|+| gain "[0 -0.1 0]/5") $ rarely (stut' 2 (0.0625) (|*| gain "1")) $
        rep' 8 $ gain pat # sound "alk" # cut "10",
      gtfo $ (# n "[1 0 2]/5") $ (|+| gain "[0.05 0.15 0.05]/5") $ rep' 8 $ gain pat # sound "alstab"
        # cut "1" # speed "<1 1 1 0.5>",
      sound "~ alcp" # gain "1",
      whenmod 14 7 (degrade) $ jux (iter 16) $
        sound "als([5 3 7]/3,8)" # cut "100" # end "0.05" # gain "0.8" # speed "1"
    ]

    c1 silence

hush


-- part deux NOOOOOOOOOOO
-- NOOOOOOOOOOOOOOOOO
bps (170/120)

-- new intro
c1 $ (|+| gain "-0.1") $ (# room "0.1") $ (# size "0.98") $ 
(# cutoff (scale 60 3000 $ shift' 282 rand)) $ (#resonance "0.1") $
foldEvery [3,4] (5.25 ~>) $
every 2 (jux rev) $  
slow "{4 8 6 12 16}%2" $ spread' (striate' 64) ((*0.1) <$> (fast 1.1 $ scale 0.25 0.5 $ sine)) $ 
rarely (off (0.125*3) (|*| speed "1.25")) $
  off (0.25*3) (|+| n "<4 2 3>") $
    sound "alstab" # n "<0 1 2>" # up "[-12 -15]/8" # gain "<1.2 1.3>"
    # delay "0.5" # delayfeedback "0.5" # delaytime "0.5"

hush


-- full
c1 $ (|+| gain "0.1") $ foldEvery [3,4] (0.25 ~>) $
stack [
  gtfo $ degradeBy 0.25 $ runWith 4 (density 2) $ iter 4 $ jux rev $
    off 0.25 (|+| n "<1 3 5 2>") $ struct "x(3,8) *2" $ n "<0 1 4>" # sound "[jung5 jung6 jung7]/8"
      # unit "c" # speed "8" # gain "1",
  runWith 2 (density 2) $
    off (0.25*3) (|+| n "<4 2 3>") $
    stack [
      sound "alstab" # n "<0 1 2>" # cut "3" # up "[-12 -15]/8" # shape "0.1" # gain "<1.2 1.2 1.3>",
      sound "alk" # n "<0 1 2>" # cut "4" # gain "1",
      gtfo $ whenmod 16 4 (gtfo) $ off (0.125*3) (|+| n "{1 2 3}%16") $
        foldEvery [2,3] (slow 2) $
        struct "x([3 5]/2,8)" $ sound "als" # cut "-1" # gain "1" ] ]
      
hush

---- END NOOOOOOOOOOOOOOOOOOOOOO

-- d code
bps (180/120)

let npat = "[0 2 4 6]/16"

hush

c1 $ move $
  every 9 (rev) $
  every 5 (|=| coarse (shift' 3 $ choose [4,6..18])) $
  every 8 (|=| accelerate "0.5 -0.5") $
  whenmod 13 11 (|=| accelerate "1") $
    slow 2 $ rep' 6 $ sound "namesy" # n "[0 1]/8" # cut "23" # gain "1" # speed "0.5" # shape "0.4"

c1 $
  move $
  every 5 (rip 0.5 0.25) $
  every 6 (crushit) $
  every 7 (|=| coarse "{16 32 24 8}%7")  $
  stack [
    gtfo $ degradeBy 0.2 $ brakk "fur1*8" # gain "0.9",
    every 8 (|=| accelerate "0.5 -0.5") $
      whenmod 13 11 (|=| accelerate "1") $
      stack [
        whenmod 16 4 (gtfo) $
          every 3 (|*| speed (choose [0.9,0.8,0.7])) $
          rarely (stut' 1 (0.0625) (|*| gain "1")) $ sound "namevox([3 5 7]/3,16)" # cut "819" # gain "1.1",
        gtfo $ rarely (stut' 1 (0.0625) (|*| gain "1")) $ sound "name([3 5 7]/3,16)" # n npat # gain "1",
        gtfo $ slow 2 $ (|+| n "1") $ sound "~ name [~ name] ~" # n npat # shape "0.2" # gain "1"],
    every 8 (|=| accelerate "0.5 -0.5") $
      whenmod 13 11 (|=| accelerate "1") $
      slow 2 $ rep' 6 $ sound "namesy" # n "[0 1]/8" # cut "23" # gain "1" # speed "0.5" # shape "0.4"] # delaytime "0" # delayfeedback "0"

hush

-- ignore file
bps (220/120)

let break p = within (0.1225, 0.375) (const $ sound "~") . within (0, 0.1225) (|=| end "0.5") $ p

-- intro
do
    hush
    c1 $ sound "if(3,8)" |=| cut "1"

-- intro break
c1 $ sound "if:1(3,8)" |=| cut "2"

c1 $ stack [
sound "if(3,8)" |=| cut "1",
sound "if:1(3,8)" |=| cut "2",
sound "ifh*8"]

-- break
c1 $ sound "if:2(3,8)" |=| cut "3"

-- main
c1 $ 
  every 4 (break) $
  stack [
    sound "if(3,8)" |=| cut "1",
    sound "if:1(3,8)" |=| cut "2",
    sound "ifh*8",
    sound "ifk(3,8)",
    sound "~ ifs" |=| gain "1.05"]

-- part 2 transition with swell
c2 $ sound "ifswell(3,8)" |=| gain "0.7" |=| cut "81" |=| shape "0.3"

--c2 silence

do
    c2 silence
    c1 $
        stack [
        sound "if:2(3,8)" |=| cut "3",
        sound "ifh*8",
        sound "ifk(3,8)",
        sound "~ ifs [~ ifs] ~"]

-- part 2 intro
c1 $
stack [
sound "if:2(3,8)" |=| cut "3",
slow 2 $ sound "ifgab*2 ifgab ~ ~" |=| cut "4" |=| shape "0.5",
slow 4 $ sound "[~ [~ ifgab:1*2]] ifgab:1(3,8) ~ ~" |=| cut "4" |=| shape "0.4" |=| speed "1 [1 [~ 1.02] ~ 1.05] 1 1",
(|*| speed "0.95") $ (|=| n "{0 1 2 0 1 2 0 1 3 4}%8") $ slowcat [s "~", s "~", s "~", brakk "amenall2*8"] |=| shape "0.1" # gain "1.2",
sound "ifh*8" |=| gain "0.7"]

-- part 2 intro trans
c1 $
stack [
slow 2 $ sound "[~ [~ ifgab:1*2]] ifgab:1(3,8)" |=| cut "1" |=| shape "0.4" |=| speed "1 [0.95 [~ 0.9] ~ 0.85]"]

-- part 2
c1 $ slow 2 $ move $ every 5 (rip 0.5 0.1) $ every 6 (|=| coarse "{16 32 24 8}%7") $
every 7 (rip' 0 1 8 0.25 0.25) $
stack [
    sound "if(3,8)" |=| cut "1",
    sound "if:1(3,8)" |=| cut "2",
    sound "ifk(3,8)",
    sound "~ ifs" |=| gain "1",
    gtfo $ slow 2 $ sound "ifgab*2 ifgab ~ ~" |=| cut "4" |=| shape "0.4",
    gtfo $ slow 4 $ sound "[~ [~ ifgab:1*2]] ifgab:1(3,8) ~ ~" |=| cut "4" |=| shape "0.3" |=| speed "1 [1 [~ 1.02] ~ 1.05] 1 1",
    degradeBy 0.1 $ (|=| n "{0 1 2 0 1 2 0 1 3 4}%8") $ slowcat [brakk "amenall2*8" |=| shape "0.1" # gain "1.2"],
    sound "ifh*8" |=| gain "0.7"]


hush

-- river cairn

bpm 210

-- reference
let pat = "{1 ~ 0 0 0*2 0*2 0*2 ~ ~ 1*2 1 0 1*2 1*2 [1 0] [1 0] 1 0 0 0}%8"
let pat1 = "{~ ~ 0 0 0*2 0*2 0*2 ~ ~ ~   ~ 0 ~   ~   [~ 0] [~ 0] ~ 0 0 0}%8"
let pat2 = "{1 ~ ~ ~ ~   ~   ~   ~ ~ 1*2 1 ~ 1*2 1*2 [1 ~] [1 ~] 1 ~ ~ ~}%8"

-- real

do
    let xxpat = "{~ ~ 0 0 0*2 0*2 0*2 ~ ~ ~   ~ 0 ~   ~   [~ 0] [~ 0] ~ 0 0 0}%8"
    let yypat = "{1 ~ ~ ~ ~   ~   ~   ~ ~ 1*2 1 ~ 1*2 1*2 [1 ~] [1 ~] 1 ~ ~ ~}%8"
    let xx = gain (inverse <$> xxpat)
    let yy = gain (yypat)
    c1 $ 
        stack [        
            sound "gab:2(3,8)" # cut "1228",
            gtfo $ jux (iter 8) $ 
                degradeBy 0.01 $ brakk "nu*8",
            gtfo $ yy # sound "y0" # n (irand 21) # cut "1" # gain "1.1" # end (shift $ choose [0.3..1]),
            gtfo $ xx # sound "x" # n "0" # cut "2" # gain "1",
            gtfo $ xx # sound "x" # n "1" # gain "0.8",
            gtfo $ (0.5 <~) $ xx # sound "x" # n "2" # gain "0.8" # cut "4" # speed (scale 1 1.25 $ saw)] # coarse "3"
            # cutoff "100" # resonance "0.1"

            hush




-- bit dust
 
bpm 140

bpm 140

let pad1intro = rep' 7 $ s "{bitpad1 ~ ~ ~ ~ ~ ~}%4" # n "{[0 1]/4 ~ ~ ~ ~ ~ ~}%4" # cut "1" # resonance "0.01" |=| gain "0.95"
    pad1 = rep' 7 $ s "{bitpad1 ~ ~ ~ ~ ~ ~}%4" # n "{[1 0 2 3]/8 ~ ~ ~ ~ ~ ~}%4" # cut "1" # resonance "0.01" |=| gain "0.95"
    pad2 = rep' 7 $ s "{bitpad2 ~ ~ ~ ~ ~ ~}%4" # n "{[1] ~ ~ ~ ~ ~ ~}%4" |=| cut "1"
    onepad = rep' 7 $ s "{bitpad1 ~ ~ ~ ~ ~ ~}%4" # n "{[1 0 2]/6 ~ ~ ~ ~ ~ ~}%4" # cut "1" # resonance "0.01" |=| gain "0.95"
    onepad' = rep' 7 $ s "{bitpad1 ~ ~ ~ ~ ~ ~}%4" # n "{[1 0 2 3]/8 ~ ~ ~ ~ ~ ~}%4" # cut "1" # resonance "0.01" |=| gain "0.95"
    twopads = rep' 7 $ whenmod 22 16 (const $ (|=| gain "1") $ s "{bitpad2 ~ ~ ~ ~ ~ ~}%4" # n "[0 1]/2" |=| cut "1" |=| gain "1") $ s "{bitpad1 ~ ~ ~ ~ ~ ~}%4" # n "{[1 0 2 3]/8 ~ ~ ~ ~ ~ ~}%4" # cut "1" # resonance "0.01" |=| gain "0.95"
    kick = rep' 7 $ gain "{1 ~ ~ ~ ~ ~ ~}%4" # s "bitkit" # n "[0 1]/6" |=| cut "2" |=| gain "1"
    kick2 = rep' 7 $ gain "{1 ~ ~ ~ ~ ~ ~}%4" # s "bitkit" # n "[0 1]/6" |=| cut "2" |=| gain "1"
    one p = stut' 1 (0.125/2) (|*| gain "1") $ p
    one' p = rarely (stut' 1 (0.125/2) (|*| gain "1")) $ shift' 1024 $ p
    one'' p = sometimes (stut' 1 (0.125/2) (|*| gain "1")) $ shift' 1024 $ p
    rep n p = stut' (n-1) (0.125*3) (|*| gain "1") $ p
    rep' n p = stut' (n-1) (0.125/2*3) (|*| gain "1") $ p

hush


flood "last one. thank you. "

c1 silence

c2 $
stack [
    (# cutoff (scale 1500 10000 $ rand)) $ pad1intro]

c2 $
stack [
    (# cutoff (scale 1500 10000 $ rand)) $ pad1intro,
    kick]

c2 $ 
stack [
    twopads,
    rarely (one) $ kick2,
    whenmod 8 4 (jux (iter 4)) $ density 4 $ every 4 (0.25 ~> ) $ s "bitkit:7" |=| gain "1",
    s "{bitkit bitkit*2 bitkit ~ [~ bitkit]*2 ~ bitkit ~ ~}%8" # n "{5 5 5 5 5 5 6}%16" |=| cut "3" |=| gain "1",
    every 7 (rep 5) $ every 6 (# up "-12") $ (0.125 <~) $ s "{bitkit:3 ~ ~ ~ ~}%4" |=| gain "1.02" |=| cut "7",
    rarely (stut' 4 (0.0625*3) (|*| gain "0.85")) $ s "{~ bits:1 ~ [~ bits:1/2] ~}%4" # cut "4" |=| gain "1" ]


-- out
c2 $ density 1 $ 
stack [
    rarely (one) $ kick2,
    whenmod 8 4 (jux (iter 4)) $ density 4 $ every 4 (0.25 ~> ) $ s "bitkit:7" |=| gain "1.1",
    s "{bitkit bitkit*2 bitkit ~ [~ bitkit]*2 ~ bitkit ~ ~}%8" # n "{5 5 5 5 5 5 6}%16" |=| cut "3" |=| gain "1",
    every 7 (rep 5) $ every 6 (# up "-12") $ (0.125 <~) $ s "{bitkit:3 ~ ~ ~ ~}%4" |=| gain "1.02" |=| cut "7",
    rarely (stut' 4 (0.0625*3) (|*| gain "0.95")) $ s "{~ bits:1 ~ [~ bits:1/2] ~}%4" # cut "4" |=| gain "1" ] 
    


hush

-- bitdust
bpm 140

let pad1intro = rep' 7 $ s "{bitpad1 ~ ~ ~ ~ ~ ~}%4" # n "{[0 1]/4 ~ ~ ~ ~ ~ ~}%4" # cut "1" # resonance "0.01" |=| gain "0.95"
    pad1 = rep' 7 $ s "{bitpad1 ~ ~ ~ ~ ~ ~}%4" # n "{[1 0 2 3]/8 ~ ~ ~ ~ ~ ~}%4" # cut "1" # resonance "0.01" |=| gain "0.95"
    pad2 = rep' 7 $ s "{bitpad2 ~ ~ ~ ~ ~ ~}%4" # n "{[1] ~ ~ ~ ~ ~ ~}%4" |=| cut "1"
    onepad = rep' 7 $ s "{bitpad1 ~ ~ ~ ~ ~ ~}%4" # n "{[1 0 2]/6 ~ ~ ~ ~ ~ ~}%4" # cut "1" # resonance "0.01" |=| gain "0.95"
    onepad' = rep' 7 $ s "{bitpad1 ~ ~ ~ ~ ~ ~}%4" # n "{[1 0 2 3]/8 ~ ~ ~ ~ ~ ~}%4" # cut "1" # resonance "0.01" |=| gain "0.95"
    twopads = rep' 7 $ whenmod 22 16 (const $ (|=| gain "1") $ s "{bitpad2 ~ ~ ~ ~ ~ ~}%4" # n "[0 1]/2" |=| cut "1" |=| gain "1") $ s "{bitpad1 ~ ~ ~ ~ ~ ~}%4" # n "{[1 0 2 3]/8 ~ ~ ~ ~ ~ ~}%4" # cut "1" # resonance "0.01" |=| gain "0.95"
    kick = rep' 7 $ gain "{1 ~ ~ ~ ~ ~ ~}%4" # s "bitkit" # n "[0 1]/6" |=| cut "2" |=| gain "1"
    kick2 = rep' 7 $ gain "{1 ~ ~ ~ ~ ~ ~}%4" # s "bitkit" # n "[0 1]/6" |=| cut "2" |=| gain "1"
    one p = stut' 1 (0.125/2) (|*| gain "1") $ p
    one' p = rarely (stut' 1 (0.125/2) (|*| gain "1")) $ shift' 1024 $ p
    one'' p = sometimes (stut' 1 (0.125/2) (|*| gain "1")) $ shift' 1024 $ p
    rep n p = stut' (n-1) (0.125*3) (|*| gain "1") $ p
    rep' n p = stut' (n-1) (0.125/2*3) (|*| gain "1") $ p

hush

c1 silence

c2 $
stack [
    (# cutoff (scale 1500 10000 $ rand)) $ pad1intro]

c2 $
stack [
    (# cutoff (scale 1500 10000 $ rand)) $ pad1intro,
    kick]

c2 $
stack [
    twopads,
    rarely (one) $ kick2,
    whenmod 8 4 (jux (iter 4)) $ density 4 $ every 4 (0.25 ~> ) $ s "bitkit:7" |=| gain "1",
    s "{bitkit bitkit*2 bitkit ~ [~ bitkit]*2 ~ bitkit ~ ~}%8" # n "{5 5 5 5 5 5 6}%16" |=| cut "3" |=| gain "1",
    every 7 (rep 5) $ every 6 (# up "-12") $ (0.125 <~) $ s "{bitkit:3 ~ ~ ~ ~}%4" |=| gain "1.02" |=| cut "7",
    rarely (stut' 4 (0.0625*3) (|*| gain "0.85")) $ s "{~ bits:1 ~ [~ bits:1/2] ~}%4" # cut "4" |=| gain "1" ]

-- out
c2 $ 
stack [
    rarely (one) $ kick2,
    whenmod 8 4 (jux (iter 4)) $ density 4 $ every 4 (0.25 ~> ) $ s "bitkit:7" |=| gain "1.1",
    s "{bitkit bitkit*2 bitkit ~ [~ bitkit]*2 ~ bitkit ~ ~}%8" # n "{5 5 5 5 5 5 6}%16" |=| cut "3" |=| gain "1",
    every 7 (rep 5) $ every 6 (# up "-12") $ (0.125 <~) $ s "{bitkit:3 ~ ~ ~ ~}%4" |=| gain "1.02" |=| cut "7",
    rarely (stut' 4 (0.0625*3) (|*| gain "0.95")) $ s "{~ bits:1 ~ [~ bits:1/2] ~}%4" # cut "4" |=| gain "1" ] 


hush



