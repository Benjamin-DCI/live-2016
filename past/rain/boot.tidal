let rip a b p = within (0.25, 0.75) (slow 2 . rev . stut 8 a b) p
    rip' a b c d e p = within (a, b) (slow 2 . rev . stut c d e) p
    spike p = ((|=| delaytime (scale 0.001 0.3 $ slow 7.1 sine1)) . (|=| delayfeedback (scale 0.7 0.99 $ slow 6.71 sine1))) $ p
    spike' p = (|=| delay "0.3") $ spike $ p
    ghost'' a f p = superimpose (((a/2 + a*2) ~>) . f) $ superimpose (((a + a/2) ~>) . f) $ p
    ghost' a p = ghost'' a ((|*| gain "0.7") . (|=| end "0.2") . (|*| speed "1.25")) p
    ghost p = ghost' 0.125 p
    jit start amount p = within (start, (start + 0.5)) (trunc (amount)) p
    gtfo p = (const $ sound "~") p
    gtfo' p = (const $ midinote "~") p
    gtfom = gtfo'
    gtfo2 = gtfo'
    shift p = (1024 <~)  p
    shift' x p = (x <~) p
    choose xs = (xs !!) <$> (irand $ fromIntegral $ length xs)
    one p = stut' 1 (0.125/2) (|*| gain "1") $ p
    one' p = rarely (stut' 1 (0.125/2) (|*| gain "1")) $ shift' 1024 $ p
    one'' p = sometimes (stut' 1 (0.125/2) (|*| gain "1")) $ shift' 1024 $ p
    rep n p = stut' (n-1) (0.125*3) (|*| gain "1") $ p
    rep' n p = stut' (n-1) (0.125/2*3) (|*| gain "1") $ p
    rep'' n p = stut' (n-1) (0.125/4*3) (|*| gain "1") $ p
    beginend bpat durpat = (begin bpat) # (end $ (+) <$> bpat <*> durpat)
    inverse 1 = 0
    inverse 0 = 1
    inverse 11 = 0
    inverse 10 = 1
    bpm x = bps (x/120)
    brakk samps = ((|=| unit "c") . (|=| speed "8")) $ sound (samples samps (irand 30))
    brakk4 samps = ((|=| unit "c") . (|=| speed "4")) $ sound (samples samps (irand 30))
    replicator text1 = [putStr (text1) | x <- replicate 1000 text1]
    flood text2 = sequence_(replicator text2)


now' <- getNow
let now = nextSam now'
let retrig = (now ~>)

--(tidal-send-string "now' <- getNow")
--  (tidal-send-string "let now = nextSam now'")

d1 $ slow 2 $ (now-1) ~> do {
    x <- slow (12 * 12) $ run 12;
    jux ((x/12) <~) $ sound "cp ! ! ~ cp ! ~ cp ~ cp ! ~"}


do
    now' <- getNow
    let now = nextSam now'
        retrig = (now ~>)
    d1 $ (now-1) ~> do {
        x <- slow (100*2) $ run 100;
        jux ((x/100) <~) $ sound "gnome"}


do
    d1 $ slow 2 $ (now) ~> do {
        x <- slow (200) $ run 200;
        jux ((x/200) <~) $ sound "gnome*2"}

hush



import Sound.Tidal.MIDI.Context
displayOutputDevices >>= putStrLn

hush




d1 $ slow 2 $ (now-1) -> do {
    x <- slow (12) $ run 12;
    slowcat [sound "bd*16",sound "drum*4", sound "odx*4", sound "cp*4" ] }
